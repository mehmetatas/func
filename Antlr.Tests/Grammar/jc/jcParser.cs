//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 jc.g 2013-04-28 00:38:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class jcParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGN", "BOOL", "CLOSE_BRACE", "CLOSE_PAR", "COMMA", "COMMENT", "DATE", "DATETIME", "DATE_FRAG", "DAY", "DIGIT", "DIV", "DOT", "HOUR", "IDENT", "LETTER", "MILLISECOND", "MINUS", "MINUTE", "MOD", "MONTH", "MUL", "MULTILINE_COMMENT", "NAME", "NUMBER", "OPEN_BRACE", "OPEN_PAR", "PATH", "PLUS", "SECOND", "SEMICOL", "STRING", "TIME", "TIME_FRAG", "TYPE", "WS", "YEAR", "':'", "'function'", "'get'", "'if'", "'return'", "'set'", "'var'"
	};
	public const int EOF=-1;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int ASSIGN=4;
	public const int BOOL=5;
	public const int CLOSE_BRACE=6;
	public const int CLOSE_PAR=7;
	public const int COMMA=8;
	public const int COMMENT=9;
	public const int DATE=10;
	public const int DATETIME=11;
	public const int DATE_FRAG=12;
	public const int DAY=13;
	public const int DIGIT=14;
	public const int DIV=15;
	public const int DOT=16;
	public const int HOUR=17;
	public const int IDENT=18;
	public const int LETTER=19;
	public const int MILLISECOND=20;
	public const int MINUS=21;
	public const int MINUTE=22;
	public const int MOD=23;
	public const int MONTH=24;
	public const int MUL=25;
	public const int MULTILINE_COMMENT=26;
	public const int NAME=27;
	public const int NUMBER=28;
	public const int OPEN_BRACE=29;
	public const int OPEN_PAR=30;
	public const int PATH=31;
	public const int PLUS=32;
	public const int SECOND=33;
	public const int SEMICOL=34;
	public const int STRING=35;
	public const int TIME=36;
	public const int TIME_FRAG=37;
	public const int TYPE=38;
	public const int WS=39;
	public const int YEAR=40;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public jcParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public jcParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return jcParser.tokenNames; } }
	public override string GrammarFileName { get { return "jc.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_build() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_build() {}

	// $ANTLR start "build"
	// jc.g:9:8: public build : ( class )* EOF ;
	[GrammarRule("build")]
	public AstParserRuleReturnScope<CommonTree, IToken> build()
	{
		EnterRule_build();
		EnterRule("build", 1);
		TraceIn("build", 1);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EOF2 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> class1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree EOF2_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "build");
		DebugLocation(9, 1);
		try
		{
			// jc.g:10:2: ( ( class )* EOF )
			DebugEnterAlt(1);
			// jc.g:10:4: ( class )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(10, 4);
			// jc.g:10:4: ( class )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NAME))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// jc.g:10:4: class
					{
					DebugLocation(10, 4);
					PushFollow(Follow._class_in_build46);
					class1=@class();
					PopFollow();

					adaptor.AddChild(root_0, class1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(10, 11);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_build49); 
			EOF2_tree = (CommonTree)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("build", 1);
			LeaveRule("build", 1);
			LeaveRule_build();
	    }
	 	DebugLocation(11, 1);
		} finally { DebugExitRule(GrammarFileName, "build"); }
		return retval;

	}
	// $ANTLR end "build"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class() {}

	// $ANTLR start "class"
	// jc.g:13:1: class : NAME ( ':' NAME )? OPEN_BRACE classBody CLOSE_BRACE ;
	[GrammarRule("class")]
	private AstParserRuleReturnScope<CommonTree, IToken> @class()
	{
		EnterRule_class();
		EnterRule("class", 2);
		TraceIn("class", 2);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken NAME3 = default(IToken);
	    IToken char_literal4 = default(IToken);
	    IToken NAME5 = default(IToken);
	    IToken OPEN_BRACE6 = default(IToken);
	    IToken CLOSE_BRACE8 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> classBody7 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree NAME3_tree = default(CommonTree);
	    CommonTree char_literal4_tree = default(CommonTree);
	    CommonTree NAME5_tree = default(CommonTree);
	    CommonTree OPEN_BRACE6_tree = default(CommonTree);
	    CommonTree CLOSE_BRACE8_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "class");
		DebugLocation(13, 1);
		try
		{
			// jc.g:14:2: ( NAME ( ':' NAME )? OPEN_BRACE classBody CLOSE_BRACE )
			DebugEnterAlt(1);
			// jc.g:14:4: NAME ( ':' NAME )? OPEN_BRACE classBody CLOSE_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(14, 4);
			NAME3=(IToken)Match(input,NAME,Follow._NAME_in_class61); 
			NAME3_tree = (CommonTree)adaptor.Create(NAME3);
			adaptor.AddChild(root_0, NAME3_tree);

			DebugLocation(14, 9);
			// jc.g:14:9: ( ':' NAME )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==41))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:14:10: ':' NAME
				{
				DebugLocation(14, 10);
				char_literal4=(IToken)Match(input,41,Follow._41_in_class64); 
				char_literal4_tree = (CommonTree)adaptor.Create(char_literal4);
				adaptor.AddChild(root_0, char_literal4_tree);

				DebugLocation(14, 14);
				NAME5=(IToken)Match(input,NAME,Follow._NAME_in_class66); 
				NAME5_tree = (CommonTree)adaptor.Create(NAME5);
				adaptor.AddChild(root_0, NAME5_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(14, 21);
			OPEN_BRACE6=(IToken)Match(input,OPEN_BRACE,Follow._OPEN_BRACE_in_class70); 
			OPEN_BRACE6_tree = (CommonTree)adaptor.Create(OPEN_BRACE6);
			adaptor.AddChild(root_0, OPEN_BRACE6_tree);

			DebugLocation(14, 32);
			PushFollow(Follow._classBody_in_class72);
			classBody7=classBody();
			PopFollow();

			adaptor.AddChild(root_0, classBody7.Tree);
			DebugLocation(14, 42);
			CLOSE_BRACE8=(IToken)Match(input,CLOSE_BRACE,Follow._CLOSE_BRACE_in_class74); 
			CLOSE_BRACE8_tree = (CommonTree)adaptor.Create(CLOSE_BRACE8);
			adaptor.AddChild(root_0, CLOSE_BRACE8_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class", 2);
			LeaveRule("class", 2);
			LeaveRule_class();
	    }
	 	DebugLocation(15, 1);
		} finally { DebugExitRule(GrammarFileName, "class"); }
		return retval;

	}
	// $ANTLR end "class"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classBody() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classBody() {}

	// $ANTLR start "classBody"
	// jc.g:17:1: classBody : ( class | member | property | function )* ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 3);
		TraceIn("classBody", 3);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> class9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> member10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> property11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> function12 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(17, 1);
		try
		{
			// jc.g:18:2: ( ( class | member | property | function )* )
			DebugEnterAlt(1);
			// jc.g:18:4: ( class | member | property | function )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(18, 4);
			// jc.g:18:4: ( class | member | property | function )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=5;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				switch (input.LA(1))
				{
				case NAME:
					{
					alt3 = 1;
					}
					break;
				case TYPE:
					{
					int LA3_3 = input.LA(2);

					if ((LA3_3==NAME))
					{
						int LA3_6 = input.LA(3);

						if ((LA3_6==OPEN_BRACE))
						{
							alt3 = 3;
						}
						else if ((LA3_6==ASSIGN||LA3_6==SEMICOL))
						{
							alt3 = 2;
						}


					}


					}
					break;
				case 47:
					{
					alt3 = 2;
					}
					break;
				case 42:
					{
					alt3 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// jc.g:18:5: class
					{
					DebugLocation(18, 5);
					PushFollow(Follow._class_in_classBody86);
					class9=@class();
					PopFollow();

					adaptor.AddChild(root_0, class9.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// jc.g:18:13: member
					{
					DebugLocation(18, 13);
					PushFollow(Follow._member_in_classBody90);
					member10=member();
					PopFollow();

					adaptor.AddChild(root_0, member10.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// jc.g:18:22: property
					{
					DebugLocation(18, 22);
					PushFollow(Follow._property_in_classBody94);
					property11=property();
					PopFollow();

					adaptor.AddChild(root_0, property11.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// jc.g:18:33: function
					{
					DebugLocation(18, 33);
					PushFollow(Follow._function_in_classBody98);
					function12=function();
					PopFollow();

					adaptor.AddChild(root_0, function12.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 3);
			LeaveRule("classBody", 3);
			LeaveRule_classBody();
	    }
	 	DebugLocation(19, 1);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member() {}

	// $ANTLR start "member"
	// jc.g:21:1: member : decl SEMICOL ;
	[GrammarRule("member")]
	private AstParserRuleReturnScope<CommonTree, IToken> member()
	{
		EnterRule_member();
		EnterRule("member", 4);
		TraceIn("member", 4);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SEMICOL14 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> decl13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SEMICOL14_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "member");
		DebugLocation(21, 1);
		try
		{
			// jc.g:22:2: ( decl SEMICOL )
			DebugEnterAlt(1);
			// jc.g:22:4: decl SEMICOL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(22, 4);
			PushFollow(Follow._decl_in_member112);
			decl13=decl();
			PopFollow();

			adaptor.AddChild(root_0, decl13.Tree);
			DebugLocation(22, 9);
			SEMICOL14=(IToken)Match(input,SEMICOL,Follow._SEMICOL_in_member114); 
			SEMICOL14_tree = (CommonTree)adaptor.Create(SEMICOL14);
			adaptor.AddChild(root_0, SEMICOL14_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member", 4);
			LeaveRule("member", 4);
			LeaveRule_member();
	    }
	 	DebugLocation(23, 1);
		} finally { DebugExitRule(GrammarFileName, "member"); }
		return retval;

	}
	// $ANTLR end "member"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_property() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_property() {}

	// $ANTLR start "property"
	// jc.g:25:1: property : TYPE NAME OPEN_BRACE ( 'get' codeBlock )? ( 'set' codeBlock )? CLOSE_BRACE ;
	[GrammarRule("property")]
	private AstParserRuleReturnScope<CommonTree, IToken> property()
	{
		EnterRule_property();
		EnterRule("property", 5);
		TraceIn("property", 5);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken TYPE15 = default(IToken);
	    IToken NAME16 = default(IToken);
	    IToken OPEN_BRACE17 = default(IToken);
	    IToken string_literal18 = default(IToken);
	    IToken string_literal20 = default(IToken);
	    IToken CLOSE_BRACE22 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> codeBlock19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> codeBlock21 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree TYPE15_tree = default(CommonTree);
	    CommonTree NAME16_tree = default(CommonTree);
	    CommonTree OPEN_BRACE17_tree = default(CommonTree);
	    CommonTree string_literal18_tree = default(CommonTree);
	    CommonTree string_literal20_tree = default(CommonTree);
	    CommonTree CLOSE_BRACE22_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property");
		DebugLocation(25, 1);
		try
		{
			// jc.g:26:2: ( TYPE NAME OPEN_BRACE ( 'get' codeBlock )? ( 'set' codeBlock )? CLOSE_BRACE )
			DebugEnterAlt(1);
			// jc.g:26:4: TYPE NAME OPEN_BRACE ( 'get' codeBlock )? ( 'set' codeBlock )? CLOSE_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(26, 4);
			TYPE15=(IToken)Match(input,TYPE,Follow._TYPE_in_property126); 
			TYPE15_tree = (CommonTree)adaptor.Create(TYPE15);
			adaptor.AddChild(root_0, TYPE15_tree);

			DebugLocation(26, 9);
			NAME16=(IToken)Match(input,NAME,Follow._NAME_in_property128); 
			NAME16_tree = (CommonTree)adaptor.Create(NAME16);
			adaptor.AddChild(root_0, NAME16_tree);

			DebugLocation(26, 14);
			OPEN_BRACE17=(IToken)Match(input,OPEN_BRACE,Follow._OPEN_BRACE_in_property130); 
			OPEN_BRACE17_tree = (CommonTree)adaptor.Create(OPEN_BRACE17);
			adaptor.AddChild(root_0, OPEN_BRACE17_tree);

			DebugLocation(27, 3);
			// jc.g:27:3: ( 'get' codeBlock )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==43))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:27:4: 'get' codeBlock
				{
				DebugLocation(27, 4);
				string_literal18=(IToken)Match(input,43,Follow._43_in_property136); 
				string_literal18_tree = (CommonTree)adaptor.Create(string_literal18);
				adaptor.AddChild(root_0, string_literal18_tree);

				DebugLocation(27, 10);
				PushFollow(Follow._codeBlock_in_property138);
				codeBlock19=codeBlock();
				PopFollow();

				adaptor.AddChild(root_0, codeBlock19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(28, 3);
			// jc.g:28:3: ( 'set' codeBlock )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_0 = input.LA(1);

			if ((LA5_0==46))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:28:4: 'set' codeBlock
				{
				DebugLocation(28, 4);
				string_literal20=(IToken)Match(input,46,Follow._46_in_property145); 
				string_literal20_tree = (CommonTree)adaptor.Create(string_literal20);
				adaptor.AddChild(root_0, string_literal20_tree);

				DebugLocation(28, 10);
				PushFollow(Follow._codeBlock_in_property147);
				codeBlock21=codeBlock();
				PopFollow();

				adaptor.AddChild(root_0, codeBlock21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(29, 3);
			CLOSE_BRACE22=(IToken)Match(input,CLOSE_BRACE,Follow._CLOSE_BRACE_in_property153); 
			CLOSE_BRACE22_tree = (CommonTree)adaptor.Create(CLOSE_BRACE22);
			adaptor.AddChild(root_0, CLOSE_BRACE22_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property", 5);
			LeaveRule("property", 5);
			LeaveRule_property();
	    }
	 	DebugLocation(30, 1);
		} finally { DebugExitRule(GrammarFileName, "property"); }
		return retval;

	}
	// $ANTLR end "property"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_function() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_function() {}

	// $ANTLR start "function"
	// jc.g:32:1: function : 'function' ( TYPE )? OPEN_PAR ( args )? CLOSE_PAR codeBlock ;
	[GrammarRule("function")]
	private AstParserRuleReturnScope<CommonTree, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 6);
		TraceIn("function", 6);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal23 = default(IToken);
	    IToken TYPE24 = default(IToken);
	    IToken OPEN_PAR25 = default(IToken);
	    IToken CLOSE_PAR27 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> args26 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> codeBlock28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal23_tree = default(CommonTree);
	    CommonTree TYPE24_tree = default(CommonTree);
	    CommonTree OPEN_PAR25_tree = default(CommonTree);
	    CommonTree CLOSE_PAR27_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(32, 1);
		try
		{
			// jc.g:33:2: ( 'function' ( TYPE )? OPEN_PAR ( args )? CLOSE_PAR codeBlock )
			DebugEnterAlt(1);
			// jc.g:33:4: 'function' ( TYPE )? OPEN_PAR ( args )? CLOSE_PAR codeBlock
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(33, 4);
			string_literal23=(IToken)Match(input,42,Follow._42_in_function166); 
			string_literal23_tree = (CommonTree)adaptor.Create(string_literal23);
			adaptor.AddChild(root_0, string_literal23_tree);

			DebugLocation(33, 15);
			// jc.g:33:15: ( TYPE )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_0 = input.LA(1);

			if ((LA6_0==TYPE))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:33:15: TYPE
				{
				DebugLocation(33, 15);
				TYPE24=(IToken)Match(input,TYPE,Follow._TYPE_in_function168); 
				TYPE24_tree = (CommonTree)adaptor.Create(TYPE24);
				adaptor.AddChild(root_0, TYPE24_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(33, 21);
			OPEN_PAR25=(IToken)Match(input,OPEN_PAR,Follow._OPEN_PAR_in_function171); 
			OPEN_PAR25_tree = (CommonTree)adaptor.Create(OPEN_PAR25);
			adaptor.AddChild(root_0, OPEN_PAR25_tree);

			DebugLocation(33, 30);
			// jc.g:33:30: ( args )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==TYPE))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:33:30: args
				{
				DebugLocation(33, 30);
				PushFollow(Follow._args_in_function173);
				args26=args();
				PopFollow();

				adaptor.AddChild(root_0, args26.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(33, 36);
			CLOSE_PAR27=(IToken)Match(input,CLOSE_PAR,Follow._CLOSE_PAR_in_function176); 
			CLOSE_PAR27_tree = (CommonTree)adaptor.Create(CLOSE_PAR27);
			adaptor.AddChild(root_0, CLOSE_PAR27_tree);

			DebugLocation(33, 46);
			PushFollow(Follow._codeBlock_in_function178);
			codeBlock28=codeBlock();
			PopFollow();

			adaptor.AddChild(root_0, codeBlock28.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 6);
			LeaveRule("function", 6);
			LeaveRule_function();
	    }
	 	DebugLocation(34, 1);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_args() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_args() {}

	// $ANTLR start "args"
	// jc.g:36:1: args : arg ( COMMA arg )* ;
	[GrammarRule("args")]
	private AstParserRuleReturnScope<CommonTree, IToken> args()
	{
		EnterRule_args();
		EnterRule("args", 7);
		TraceIn("args", 7);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA30 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> arg29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> arg31 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA30_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(36, 1);
		try
		{
			// jc.g:37:2: ( arg ( COMMA arg )* )
			DebugEnterAlt(1);
			// jc.g:37:4: arg ( COMMA arg )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(37, 4);
			PushFollow(Follow._arg_in_args190);
			arg29=arg();
			PopFollow();

			adaptor.AddChild(root_0, arg29.Tree);
			DebugLocation(37, 8);
			// jc.g:37:8: ( COMMA arg )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==COMMA))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// jc.g:37:9: COMMA arg
					{
					DebugLocation(37, 9);
					COMMA30=(IToken)Match(input,COMMA,Follow._COMMA_in_args193); 
					COMMA30_tree = (CommonTree)adaptor.Create(COMMA30);
					adaptor.AddChild(root_0, COMMA30_tree);

					DebugLocation(37, 15);
					PushFollow(Follow._arg_in_args195);
					arg31=arg();
					PopFollow();

					adaptor.AddChild(root_0, arg31.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args", 7);
			LeaveRule("args", 7);
			LeaveRule_args();
	    }
	 	DebugLocation(38, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return retval;

	}
	// $ANTLR end "args"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arg() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arg() {}

	// $ANTLR start "arg"
	// jc.g:40:1: arg : TYPE NAME ;
	[GrammarRule("arg")]
	private AstParserRuleReturnScope<CommonTree, IToken> arg()
	{
		EnterRule_arg();
		EnterRule("arg", 8);
		TraceIn("arg", 8);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken TYPE32 = default(IToken);
	    IToken NAME33 = default(IToken);

	    CommonTree TYPE32_tree = default(CommonTree);
	    CommonTree NAME33_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "arg");
		DebugLocation(40, 1);
		try
		{
			// jc.g:41:2: ( TYPE NAME )
			DebugEnterAlt(1);
			// jc.g:41:4: TYPE NAME
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(41, 4);
			TYPE32=(IToken)Match(input,TYPE,Follow._TYPE_in_arg209); 
			TYPE32_tree = (CommonTree)adaptor.Create(TYPE32);
			adaptor.AddChild(root_0, TYPE32_tree);

			DebugLocation(41, 9);
			NAME33=(IToken)Match(input,NAME,Follow._NAME_in_arg211); 
			NAME33_tree = (CommonTree)adaptor.Create(NAME33);
			adaptor.AddChild(root_0, NAME33_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arg", 8);
			LeaveRule("arg", 8);
			LeaveRule_arg();
	    }
	 	DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "arg"); }
		return retval;

	}
	// $ANTLR end "arg"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_codeBlock() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_codeBlock() {}

	// $ANTLR start "codeBlock"
	// jc.g:44:1: codeBlock : OPEN_BRACE ( line | statement )* CLOSE_BRACE ;
	[GrammarRule("codeBlock")]
	private AstParserRuleReturnScope<CommonTree, IToken> codeBlock()
	{
		EnterRule_codeBlock();
		EnterRule("codeBlock", 9);
		TraceIn("codeBlock", 9);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken OPEN_BRACE34 = default(IToken);
	    IToken CLOSE_BRACE37 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> line35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> statement36 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree OPEN_BRACE34_tree = default(CommonTree);
	    CommonTree CLOSE_BRACE37_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "codeBlock");
		DebugLocation(44, 1);
		try
		{
			// jc.g:45:2: ( OPEN_BRACE ( line | statement )* CLOSE_BRACE )
			DebugEnterAlt(1);
			// jc.g:45:4: OPEN_BRACE ( line | statement )* CLOSE_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(45, 4);
			OPEN_BRACE34=(IToken)Match(input,OPEN_BRACE,Follow._OPEN_BRACE_in_codeBlock222); 
			OPEN_BRACE34_tree = (CommonTree)adaptor.Create(OPEN_BRACE34);
			adaptor.AddChild(root_0, OPEN_BRACE34_tree);

			DebugLocation(45, 15);
			// jc.g:45:15: ( line | statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=3;
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_0 = input.LA(1);

				if ((LA9_0==BOOL||(LA9_0>=DATE && LA9_0<=DATETIME)||(LA9_0>=NAME && LA9_0<=NUMBER)||LA9_0==PATH||(LA9_0>=STRING && LA9_0<=TIME)||LA9_0==TYPE||LA9_0==47))
				{
					alt9 = 1;
				}
				else if (((LA9_0>=44 && LA9_0<=45)))
				{
					alt9 = 2;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// jc.g:45:16: line
					{
					DebugLocation(45, 16);
					PushFollow(Follow._line_in_codeBlock225);
					line35=line();
					PopFollow();

					adaptor.AddChild(root_0, line35.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// jc.g:45:23: statement
					{
					DebugLocation(45, 23);
					PushFollow(Follow._statement_in_codeBlock229);
					statement36=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement36.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(45, 35);
			CLOSE_BRACE37=(IToken)Match(input,CLOSE_BRACE,Follow._CLOSE_BRACE_in_codeBlock233); 
			CLOSE_BRACE37_tree = (CommonTree)adaptor.Create(CLOSE_BRACE37);
			adaptor.AddChild(root_0, CLOSE_BRACE37_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("codeBlock", 9);
			LeaveRule("codeBlock", 9);
			LeaveRule_codeBlock();
	    }
	 	DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "codeBlock"); }
		return retval;

	}
	// $ANTLR end "codeBlock"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_line() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_line() {}

	// $ANTLR start "line"
	// jc.g:48:1: line : ( decl | expression ) SEMICOL ;
	[GrammarRule("line")]
	private AstParserRuleReturnScope<CommonTree, IToken> line()
	{
		EnterRule_line();
		EnterRule("line", 10);
		TraceIn("line", 10);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SEMICOL40 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> decl38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> expression39 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SEMICOL40_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "line");
		DebugLocation(48, 1);
		try
		{
			// jc.g:49:2: ( ( decl | expression ) SEMICOL )
			DebugEnterAlt(1);
			// jc.g:49:4: ( decl | expression ) SEMICOL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(49, 4);
			// jc.g:49:4: ( decl | expression )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==TYPE||LA10_0==47))
			{
				alt10 = 1;
			}
			else if ((LA10_0==BOOL||(LA10_0>=DATE && LA10_0<=DATETIME)||(LA10_0>=NAME && LA10_0<=NUMBER)||LA10_0==PATH||(LA10_0>=STRING && LA10_0<=TIME)))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:49:5: decl
				{
				DebugLocation(49, 5);
				PushFollow(Follow._decl_in_line245);
				decl38=decl();
				PopFollow();

				adaptor.AddChild(root_0, decl38.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// jc.g:49:12: expression
				{
				DebugLocation(49, 12);
				PushFollow(Follow._expression_in_line249);
				expression39=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression39.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(49, 24);
			SEMICOL40=(IToken)Match(input,SEMICOL,Follow._SEMICOL_in_line252); 
			SEMICOL40_tree = (CommonTree)adaptor.Create(SEMICOL40);
			adaptor.AddChild(root_0, SEMICOL40_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("line", 10);
			LeaveRule("line", 10);
			LeaveRule_line();
	    }
	 	DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "line"); }
		return retval;

	}
	// $ANTLR end "line"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_decl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_decl() {}

	// $ANTLR start "decl"
	// jc.g:52:1: decl : ( TYPE | 'var' ) NAME ( ASSIGN expression )? ;
	[GrammarRule("decl")]
	private AstParserRuleReturnScope<CommonTree, IToken> decl()
	{
		EnterRule_decl();
		EnterRule("decl", 11);
		TraceIn("decl", 11);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set41 = default(IToken);
	    IToken NAME42 = default(IToken);
	    IToken ASSIGN43 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> expression44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set41_tree = default(CommonTree);
	    CommonTree NAME42_tree = default(CommonTree);
	    CommonTree ASSIGN43_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "decl");
		DebugLocation(52, 1);
		try
		{
			// jc.g:53:2: ( ( TYPE | 'var' ) NAME ( ASSIGN expression )? )
			DebugEnterAlt(1);
			// jc.g:53:4: ( TYPE | 'var' ) NAME ( ASSIGN expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(53, 4);

			set41=(IToken)input.LT(1);
			if (input.LA(1)==TYPE||input.LA(1)==47)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set41));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(53, 19);
			NAME42=(IToken)Match(input,NAME,Follow._NAME_in_decl273); 
			NAME42_tree = (CommonTree)adaptor.Create(NAME42);
			adaptor.AddChild(root_0, NAME42_tree);

			DebugLocation(53, 24);
			// jc.g:53:24: ( ASSIGN expression )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==ASSIGN))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:53:25: ASSIGN expression
				{
				DebugLocation(53, 25);
				ASSIGN43=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_decl276); 
				ASSIGN43_tree = (CommonTree)adaptor.Create(ASSIGN43);
				adaptor.AddChild(root_0, ASSIGN43_tree);

				DebugLocation(53, 32);
				PushFollow(Follow._expression_in_decl278);
				expression44=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression44.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decl", 11);
			LeaveRule("decl", 11);
			LeaveRule_decl();
	    }
	 	DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "decl"); }
		return retval;

	}
	// $ANTLR end "decl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// jc.g:56:1: statement : ( ifStatement | returnStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 12);
		TraceIn("statement", 12);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> ifStatement45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> returnStatement46 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(56, 1);
		try
		{
			// jc.g:57:2: ( ifStatement | returnStatement )
			int alt12=2;
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==44))
			{
				alt12 = 1;
			}
			else if ((LA12_0==45))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:57:5: ifStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(57, 5);
				PushFollow(Follow._ifStatement_in_statement293);
				ifStatement45=ifStatement();
				PopFollow();

				adaptor.AddChild(root_0, ifStatement45.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// jc.g:57:19: returnStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(57, 19);
				PushFollow(Follow._returnStatement_in_statement297);
				returnStatement46=returnStatement();
				PopFollow();

				adaptor.AddChild(root_0, returnStatement46.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 12);
			LeaveRule("statement", 12);
			LeaveRule_statement();
	    }
	 	DebugLocation(58, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_ifStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_ifStatement() {}

	// $ANTLR start "ifStatement"
	// jc.g:60:1: ifStatement : 'if' OPEN_PAR expression CLOSE_PAR OPEN_BRACE ( statement | expression )* CLOSE_BRACE ;
	[GrammarRule("ifStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 13);
		TraceIn("ifStatement", 13);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal47 = default(IToken);
	    IToken OPEN_PAR48 = default(IToken);
	    IToken CLOSE_PAR50 = default(IToken);
	    IToken OPEN_BRACE51 = default(IToken);
	    IToken CLOSE_BRACE54 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> expression49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> statement52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> expression53 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal47_tree = default(CommonTree);
	    CommonTree OPEN_PAR48_tree = default(CommonTree);
	    CommonTree CLOSE_PAR50_tree = default(CommonTree);
	    CommonTree OPEN_BRACE51_tree = default(CommonTree);
	    CommonTree CLOSE_BRACE54_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(60, 1);
		try
		{
			// jc.g:61:2: ( 'if' OPEN_PAR expression CLOSE_PAR OPEN_BRACE ( statement | expression )* CLOSE_BRACE )
			DebugEnterAlt(1);
			// jc.g:61:4: 'if' OPEN_PAR expression CLOSE_PAR OPEN_BRACE ( statement | expression )* CLOSE_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(61, 4);
			string_literal47=(IToken)Match(input,44,Follow._44_in_ifStatement309); 
			string_literal47_tree = (CommonTree)adaptor.Create(string_literal47);
			adaptor.AddChild(root_0, string_literal47_tree);

			DebugLocation(61, 9);
			OPEN_PAR48=(IToken)Match(input,OPEN_PAR,Follow._OPEN_PAR_in_ifStatement311); 
			OPEN_PAR48_tree = (CommonTree)adaptor.Create(OPEN_PAR48);
			adaptor.AddChild(root_0, OPEN_PAR48_tree);

			DebugLocation(61, 18);
			PushFollow(Follow._expression_in_ifStatement313);
			expression49=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression49.Tree);
			DebugLocation(61, 29);
			CLOSE_PAR50=(IToken)Match(input,CLOSE_PAR,Follow._CLOSE_PAR_in_ifStatement315); 
			CLOSE_PAR50_tree = (CommonTree)adaptor.Create(CLOSE_PAR50);
			adaptor.AddChild(root_0, CLOSE_PAR50_tree);

			DebugLocation(61, 39);
			OPEN_BRACE51=(IToken)Match(input,OPEN_BRACE,Follow._OPEN_BRACE_in_ifStatement317); 
			OPEN_BRACE51_tree = (CommonTree)adaptor.Create(OPEN_BRACE51);
			adaptor.AddChild(root_0, OPEN_BRACE51_tree);

			DebugLocation(61, 50);
			// jc.g:61:50: ( statement | expression )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=3;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if (((LA13_0>=44 && LA13_0<=45)))
				{
					alt13 = 1;
				}
				else if ((LA13_0==BOOL||(LA13_0>=DATE && LA13_0<=DATETIME)||(LA13_0>=NAME && LA13_0<=NUMBER)||LA13_0==PATH||(LA13_0>=STRING && LA13_0<=TIME)))
				{
					alt13 = 2;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// jc.g:61:51: statement
					{
					DebugLocation(61, 51);
					PushFollow(Follow._statement_in_ifStatement320);
					statement52=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement52.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// jc.g:61:63: expression
					{
					DebugLocation(61, 63);
					PushFollow(Follow._expression_in_ifStatement324);
					expression53=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression53.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(61, 76);
			CLOSE_BRACE54=(IToken)Match(input,CLOSE_BRACE,Follow._CLOSE_BRACE_in_ifStatement328); 
			CLOSE_BRACE54_tree = (CommonTree)adaptor.Create(CLOSE_BRACE54);
			adaptor.AddChild(root_0, CLOSE_BRACE54_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 13);
			LeaveRule("ifStatement", 13);
			LeaveRule_ifStatement();
	    }
	 	DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_returnStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_returnStatement() {}

	// $ANTLR start "returnStatement"
	// jc.g:64:1: returnStatement : 'return' expression SEMICOL ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 14);
		TraceIn("returnStatement", 14);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal55 = default(IToken);
	    IToken SEMICOL57 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> expression56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal55_tree = default(CommonTree);
	    CommonTree SEMICOL57_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(64, 1);
		try
		{
			// jc.g:65:2: ( 'return' expression SEMICOL )
			DebugEnterAlt(1);
			// jc.g:65:4: 'return' expression SEMICOL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(65, 4);
			string_literal55=(IToken)Match(input,45,Follow._45_in_returnStatement339); 
			string_literal55_tree = (CommonTree)adaptor.Create(string_literal55);
			adaptor.AddChild(root_0, string_literal55_tree);

			DebugLocation(65, 13);
			PushFollow(Follow._expression_in_returnStatement341);
			expression56=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression56.Tree);
			DebugLocation(65, 24);
			SEMICOL57=(IToken)Match(input,SEMICOL,Follow._SEMICOL_in_returnStatement343); 
			SEMICOL57_tree = (CommonTree)adaptor.Create(SEMICOL57);
			adaptor.AddChild(root_0, SEMICOL57_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 14);
			LeaveRule("returnStatement", 14);
			LeaveRule_returnStatement();
	    }
	 	DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// jc.g:68:1: expression : ( call | assignment | STRING | NUMBER | BOOL | DATE | TIME | DATETIME | NAME | PATH );
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 15);
		TraceIn("expression", 15);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken STRING60 = default(IToken);
	    IToken NUMBER61 = default(IToken);
	    IToken BOOL62 = default(IToken);
	    IToken DATE63 = default(IToken);
	    IToken TIME64 = default(IToken);
	    IToken DATETIME65 = default(IToken);
	    IToken NAME66 = default(IToken);
	    IToken PATH67 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> call58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> assignment59 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree STRING60_tree = default(CommonTree);
	    CommonTree NUMBER61_tree = default(CommonTree);
	    CommonTree BOOL62_tree = default(CommonTree);
	    CommonTree DATE63_tree = default(CommonTree);
	    CommonTree TIME64_tree = default(CommonTree);
	    CommonTree DATETIME65_tree = default(CommonTree);
	    CommonTree NAME66_tree = default(CommonTree);
	    CommonTree PATH67_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(68, 1);
		try
		{
			// jc.g:69:2: ( call | assignment | STRING | NUMBER | BOOL | DATE | TIME | DATETIME | NAME | PATH )
			int alt14=10;
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			switch (input.LA(1))
			{
			case NAME:
				{
				switch (input.LA(2))
				{
				case OPEN_PAR:
					{
					alt14 = 1;
					}
					break;
				case ASSIGN:
					{
					alt14 = 2;
					}
					break;
				case BOOL:
				case CLOSE_BRACE:
				case CLOSE_PAR:
				case DATE:
				case DATETIME:
				case NAME:
				case NUMBER:
				case PATH:
				case SEMICOL:
				case STRING:
				case TIME:
				case 44:
				case 45:
					{
					alt14 = 9;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case STRING:
				{
				alt14 = 3;
				}
				break;
			case NUMBER:
				{
				alt14 = 4;
				}
				break;
			case BOOL:
				{
				alt14 = 5;
				}
				break;
			case DATE:
				{
				alt14 = 6;
				}
				break;
			case TIME:
				{
				alt14 = 7;
				}
				break;
			case DATETIME:
				{
				alt14 = 8;
				}
				break;
			case PATH:
				{
				switch (input.LA(2))
				{
				case OPEN_PAR:
					{
					alt14 = 1;
					}
					break;
				case ASSIGN:
					{
					alt14 = 2;
					}
					break;
				case BOOL:
				case CLOSE_BRACE:
				case CLOSE_PAR:
				case DATE:
				case DATETIME:
				case NAME:
				case NUMBER:
				case PATH:
				case SEMICOL:
				case STRING:
				case TIME:
				case 44:
				case 45:
					{
					alt14 = 10;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:69:4: call
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(69, 4);
				PushFollow(Follow._call_in_expression355);
				call58=call();
				PopFollow();

				adaptor.AddChild(root_0, call58.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// jc.g:70:5: assignment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(70, 5);
				PushFollow(Follow._assignment_in_expression362);
				assignment59=assignment();
				PopFollow();

				adaptor.AddChild(root_0, assignment59.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// jc.g:71:5: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(71, 5);
				STRING60=(IToken)Match(input,STRING,Follow._STRING_in_expression369); 
				STRING60_tree = (CommonTree)adaptor.Create(STRING60);
				adaptor.AddChild(root_0, STRING60_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// jc.g:72:5: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(72, 5);
				NUMBER61=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression376); 
				NUMBER61_tree = (CommonTree)adaptor.Create(NUMBER61);
				adaptor.AddChild(root_0, NUMBER61_tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// jc.g:73:5: BOOL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 5);
				BOOL62=(IToken)Match(input,BOOL,Follow._BOOL_in_expression383); 
				BOOL62_tree = (CommonTree)adaptor.Create(BOOL62);
				adaptor.AddChild(root_0, BOOL62_tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// jc.g:74:5: DATE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 5);
				DATE63=(IToken)Match(input,DATE,Follow._DATE_in_expression390); 
				DATE63_tree = (CommonTree)adaptor.Create(DATE63);
				adaptor.AddChild(root_0, DATE63_tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// jc.g:75:5: TIME
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 5);
				TIME64=(IToken)Match(input,TIME,Follow._TIME_in_expression397); 
				TIME64_tree = (CommonTree)adaptor.Create(TIME64);
				adaptor.AddChild(root_0, TIME64_tree);


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// jc.g:76:5: DATETIME
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 5);
				DATETIME65=(IToken)Match(input,DATETIME,Follow._DATETIME_in_expression403); 
				DATETIME65_tree = (CommonTree)adaptor.Create(DATETIME65);
				adaptor.AddChild(root_0, DATETIME65_tree);


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// jc.g:77:4: NAME
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				NAME66=(IToken)Match(input,NAME,Follow._NAME_in_expression408); 
				NAME66_tree = (CommonTree)adaptor.Create(NAME66);
				adaptor.AddChild(root_0, NAME66_tree);


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// jc.g:78:4: PATH
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PATH67=(IToken)Match(input,PATH,Follow._PATH_in_expression413); 
				PATH67_tree = (CommonTree)adaptor.Create(PATH67);
				adaptor.AddChild(root_0, PATH67_tree);


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 15);
			LeaveRule("expression", 15);
			LeaveRule_expression();
	    }
	 	DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_call() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_call() {}

	// $ANTLR start "call"
	// jc.g:81:1: call : ( NAME | PATH ) OPEN_PAR ( args )? CLOSE_PAR ;
	[GrammarRule("call")]
	private AstParserRuleReturnScope<CommonTree, IToken> call()
	{
		EnterRule_call();
		EnterRule("call", 16);
		TraceIn("call", 16);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set68 = default(IToken);
	    IToken OPEN_PAR69 = default(IToken);
	    IToken CLOSE_PAR71 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> args70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set68_tree = default(CommonTree);
	    CommonTree OPEN_PAR69_tree = default(CommonTree);
	    CommonTree CLOSE_PAR71_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "call");
		DebugLocation(81, 1);
		try
		{
			// jc.g:82:2: ( ( NAME | PATH ) OPEN_PAR ( args )? CLOSE_PAR )
			DebugEnterAlt(1);
			// jc.g:82:4: ( NAME | PATH ) OPEN_PAR ( args )? CLOSE_PAR
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(82, 4);

			set68=(IToken)input.LT(1);
			if (input.LA(1)==NAME||input.LA(1)==PATH)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set68));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(82, 18);
			OPEN_PAR69=(IToken)Match(input,OPEN_PAR,Follow._OPEN_PAR_in_call432); 
			OPEN_PAR69_tree = (CommonTree)adaptor.Create(OPEN_PAR69);
			adaptor.AddChild(root_0, OPEN_PAR69_tree);

			DebugLocation(82, 27);
			// jc.g:82:27: ( args )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==TYPE))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// jc.g:82:27: args
				{
				DebugLocation(82, 27);
				PushFollow(Follow._args_in_call434);
				args70=args();
				PopFollow();

				adaptor.AddChild(root_0, args70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(82, 33);
			CLOSE_PAR71=(IToken)Match(input,CLOSE_PAR,Follow._CLOSE_PAR_in_call437); 
			CLOSE_PAR71_tree = (CommonTree)adaptor.Create(CLOSE_PAR71);
			adaptor.AddChild(root_0, CLOSE_PAR71_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call", 16);
			LeaveRule("call", 16);
			LeaveRule_call();
	    }
	 	DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "call"); }
		return retval;

	}
	// $ANTLR end "call"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// jc.g:85:1: assignment : ( NAME | PATH ) ASSIGN expression ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 17);
		TraceIn("assignment", 17);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set72 = default(IToken);
	    IToken ASSIGN73 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> expression74 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set72_tree = default(CommonTree);
	    CommonTree ASSIGN73_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(85, 1);
		try
		{
			// jc.g:86:2: ( ( NAME | PATH ) ASSIGN expression )
			DebugEnterAlt(1);
			// jc.g:86:4: ( NAME | PATH ) ASSIGN expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(86, 4);

			set72=(IToken)input.LT(1);
			if (input.LA(1)==NAME||input.LA(1)==PATH)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set72));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(86, 18);
			ASSIGN73=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assignment456); 
			ASSIGN73_tree = (CommonTree)adaptor.Create(ASSIGN73);
			adaptor.AddChild(root_0, ASSIGN73_tree);

			DebugLocation(86, 25);
			PushFollow(Follow._expression_in_assignment458);
			expression74=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression74.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 17);
			LeaveRule("assignment", 17);
			LeaveRule_assignment();
	    }
	 	DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _class_in_build46 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EOF_in_build49 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_class61 = new BitSet(new ulong[]{0x20020000000UL});
		public static readonly BitSet _41_in_class64 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _NAME_in_class66 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _OPEN_BRACE_in_class70 = new BitSet(new ulong[]{0x844008000040UL});
		public static readonly BitSet _classBody_in_class72 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _CLOSE_BRACE_in_class74 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_in_classBody86 = new BitSet(new ulong[]{0x844008000002UL});
		public static readonly BitSet _member_in_classBody90 = new BitSet(new ulong[]{0x844008000002UL});
		public static readonly BitSet _property_in_classBody94 = new BitSet(new ulong[]{0x844008000002UL});
		public static readonly BitSet _function_in_classBody98 = new BitSet(new ulong[]{0x844008000002UL});
		public static readonly BitSet _decl_in_member112 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _SEMICOL_in_member114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_property126 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _NAME_in_property128 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _OPEN_BRACE_in_property130 = new BitSet(new ulong[]{0x480000000040UL});
		public static readonly BitSet _43_in_property136 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _codeBlock_in_property138 = new BitSet(new ulong[]{0x400000000040UL});
		public static readonly BitSet _46_in_property145 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _codeBlock_in_property147 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _CLOSE_BRACE_in_property153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_function166 = new BitSet(new ulong[]{0x4040000000UL});
		public static readonly BitSet _TYPE_in_function168 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _OPEN_PAR_in_function171 = new BitSet(new ulong[]{0x4000000080UL});
		public static readonly BitSet _args_in_function173 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _CLOSE_PAR_in_function176 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _codeBlock_in_function178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arg_in_args190 = new BitSet(new ulong[]{0x102UL});
		public static readonly BitSet _COMMA_in_args193 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _arg_in_args195 = new BitSet(new ulong[]{0x102UL});
		public static readonly BitSet _TYPE_in_arg209 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _NAME_in_arg211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_BRACE_in_codeBlock222 = new BitSet(new ulong[]{0xB05898000C60UL});
		public static readonly BitSet _line_in_codeBlock225 = new BitSet(new ulong[]{0xB05898000C60UL});
		public static readonly BitSet _statement_in_codeBlock229 = new BitSet(new ulong[]{0xB05898000C60UL});
		public static readonly BitSet _CLOSE_BRACE_in_codeBlock233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decl_in_line245 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _expression_in_line249 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _SEMICOL_in_line252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_decl265 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _NAME_in_decl273 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _ASSIGN_in_decl276 = new BitSet(new ulong[]{0x1898000C20UL});
		public static readonly BitSet _expression_in_decl278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_ifStatement309 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _OPEN_PAR_in_ifStatement311 = new BitSet(new ulong[]{0x1898000C20UL});
		public static readonly BitSet _expression_in_ifStatement313 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _CLOSE_PAR_in_ifStatement315 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _OPEN_BRACE_in_ifStatement317 = new BitSet(new ulong[]{0x301898000C60UL});
		public static readonly BitSet _statement_in_ifStatement320 = new BitSet(new ulong[]{0x301898000C60UL});
		public static readonly BitSet _expression_in_ifStatement324 = new BitSet(new ulong[]{0x301898000C60UL});
		public static readonly BitSet _CLOSE_BRACE_in_ifStatement328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_returnStatement339 = new BitSet(new ulong[]{0x1898000C20UL});
		public static readonly BitSet _expression_in_returnStatement341 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _SEMICOL_in_returnStatement343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_in_expression355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_expression362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOL_in_expression383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_expression390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIME_in_expression397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_expression403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_expression408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PATH_in_expression413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_call424 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _OPEN_PAR_in_call432 = new BitSet(new ulong[]{0x4000000080UL});
		public static readonly BitSet _args_in_call434 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _CLOSE_PAR_in_call437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_assignment448 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ASSIGN_in_assignment456 = new BitSet(new ulong[]{0x1898000C20UL});
		public static readonly BitSet _expression_in_assignment458 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
