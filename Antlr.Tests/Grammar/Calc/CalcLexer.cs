//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 Calc.g 2013-04-24 19:32:39

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CalcLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ASSIGN=4;
	public const int CLOSE_PAR=5;
	public const int COMMENT=6;
	public const int DIGIT=7;
	public const int DIV=8;
	public const int IDENT=9;
	public const int LETTER=10;
	public const int MINUS=11;
	public const int MOD=12;
	public const int MUL=13;
	public const int MULTILINE_COMMENT=14;
	public const int NEGATION=15;
	public const int NUMBER=16;
	public const int OPEN_PAR=17;
	public const int PLUS=18;
	public const int SEMI_COL=19;
	public const int WS=20;

    // delegates
    // delegators

	public CalcLexer()
	{
		OnCreated();
	}

	public CalcLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CalcLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Calc.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LETTER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LETTER() {}

    // $ANTLR start "LETTER"
    [GrammarRule("LETTER")]
    private void mLETTER()
    {
    	EnterRule_LETTER();
    	EnterRule("LETTER", 1);
    	TraceIn("LETTER", 1);
    		try
    		{
    		// Calc.g:46:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
    		DebugEnterAlt(1);
    		// Calc.g:
    		{
    		DebugLocation(46, 17);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("LETTER", 1);
    		LeaveRule("LETTER", 1);
    		LeaveRule_LETTER();
        }
    }
    // $ANTLR end "LETTER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIGIT() {}

    // $ANTLR start "DIGIT"
    [GrammarRule("DIGIT")]
    private void mDIGIT()
    {
    	EnterRule_DIGIT();
    	EnterRule("DIGIT", 2);
    	TraceIn("DIGIT", 2);
    		try
    		{
    		// Calc.g:47:16: ( '0' .. '9' )
    		DebugEnterAlt(1);
    		// Calc.g:
    		{
    		DebugLocation(47, 16);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("DIGIT", 2);
    		LeaveRule("DIGIT", 2);
    		LeaveRule_DIGIT();
        }
    }
    // $ANTLR end "DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NUMBER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NUMBER() {}

    // $ANTLR start "NUMBER"
    [GrammarRule("NUMBER")]
    private void mNUMBER()
    {
    	EnterRule_NUMBER();
    	EnterRule("NUMBER", 3);
    	TraceIn("NUMBER", 3);
    		try
    		{
    		int _type = NUMBER;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:49:8: ( ( DIGIT )+ ( '.' ( DIGIT )+ )? )
    		DebugEnterAlt(1);
    		// Calc.g:49:10: ( DIGIT )+ ( '.' ( DIGIT )+ )?
    		{
    		DebugLocation(49, 10);
    		// Calc.g:49:10: ( DIGIT )+
    		int cnt1=0;
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='0' && LA1_0<='9')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch (alt1)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// Calc.g:
    				{
    				DebugLocation(49, 10);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt1 >= 1)
    					goto loop1;

    				EarlyExitException eee1 = new EarlyExitException( 1, input );
    				DebugRecognitionException(eee1);
    				throw eee1;
    			}
    			cnt1++;
    		}
    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }

    		DebugLocation(49, 17);
    		// Calc.g:49:17: ( '.' ( DIGIT )+ )?
    		int alt3=2;
    		try { DebugEnterSubRule(3);
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		int LA3_0 = input.LA(1);

    		if ((LA3_0=='.'))
    		{
    			alt3 = 1;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// Calc.g:49:18: '.' ( DIGIT )+
    			{
    			DebugLocation(49, 18);
    			Match('.'); 
    			DebugLocation(49, 22);
    			// Calc.g:49:22: ( DIGIT )+
    			int cnt2=0;
    			try { DebugEnterSubRule(2);
    			while (true)
    			{
    				int alt2=2;
    				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    				int LA2_0 = input.LA(1);

    				if (((LA2_0>='0' && LA2_0<='9')))
    				{
    					alt2 = 1;
    				}


    				} finally { DebugExitDecision(2); }
    				switch (alt2)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// Calc.g:
    					{
    					DebugLocation(49, 22);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt2 >= 1)
    						goto loop2;

    					EarlyExitException eee2 = new EarlyExitException( 2, input );
    					DebugRecognitionException(eee2);
    					throw eee2;
    				}
    				cnt2++;
    			}
    			loop2:
    				;

    			} finally { DebugExitSubRule(2); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(3); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NUMBER", 3);
    		LeaveRule("NUMBER", 3);
    		LeaveRule_NUMBER();
        }
    }
    // $ANTLR end "NUMBER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_IDENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_IDENT() {}

    // $ANTLR start "IDENT"
    [GrammarRule("IDENT")]
    private void mIDENT()
    {
    	EnterRule_IDENT();
    	EnterRule("IDENT", 4);
    	TraceIn("IDENT", 4);
    		try
    		{
    		int _type = IDENT;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:50:7: ( LETTER ( LETTER | DIGIT )* )
    		DebugEnterAlt(1);
    		// Calc.g:50:9: LETTER ( LETTER | DIGIT )*
    		{
    		DebugLocation(50, 9);
    		mLETTER(); 
    		DebugLocation(50, 16);
    		// Calc.g:50:16: ( LETTER | DIGIT )*
    		try { DebugEnterSubRule(4);
    		while (true)
    		{
    			int alt4=2;
    			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    			int LA4_0 = input.LA(1);

    			if (((LA4_0>='0' && LA4_0<='9')||(LA4_0>='A' && LA4_0<='Z')||(LA4_0>='a' && LA4_0<='z')))
    			{
    				alt4 = 1;
    			}


    			} finally { DebugExitDecision(4); }
    			switch ( alt4 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// Calc.g:
    				{
    				DebugLocation(50, 16);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop4;
    			}
    		}

    		loop4:
    			;

    		} finally { DebugExitSubRule(4); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("IDENT", 4);
    		LeaveRule("IDENT", 4);
    		LeaveRule_IDENT();
        }
    }
    // $ANTLR end "IDENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OPEN_PAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OPEN_PAR() {}

    // $ANTLR start "OPEN_PAR"
    [GrammarRule("OPEN_PAR")]
    private void mOPEN_PAR()
    {
    	EnterRule_OPEN_PAR();
    	EnterRule("OPEN_PAR", 5);
    	TraceIn("OPEN_PAR", 5);
    		try
    		{
    		int _type = OPEN_PAR;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:52:10: ( '(' )
    		DebugEnterAlt(1);
    		// Calc.g:52:12: '('
    		{
    		DebugLocation(52, 12);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OPEN_PAR", 5);
    		LeaveRule("OPEN_PAR", 5);
    		LeaveRule_OPEN_PAR();
        }
    }
    // $ANTLR end "OPEN_PAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CLOSE_PAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CLOSE_PAR() {}

    // $ANTLR start "CLOSE_PAR"
    [GrammarRule("CLOSE_PAR")]
    private void mCLOSE_PAR()
    {
    	EnterRule_CLOSE_PAR();
    	EnterRule("CLOSE_PAR", 6);
    	TraceIn("CLOSE_PAR", 6);
    		try
    		{
    		int _type = CLOSE_PAR;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:53:11: ( ')' )
    		DebugEnterAlt(1);
    		// Calc.g:53:13: ')'
    		{
    		DebugLocation(53, 13);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CLOSE_PAR", 6);
    		LeaveRule("CLOSE_PAR", 6);
    		LeaveRule_CLOSE_PAR();
        }
    }
    // $ANTLR end "CLOSE_PAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_PLUS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_PLUS() {}

    // $ANTLR start "PLUS"
    [GrammarRule("PLUS")]
    private void mPLUS()
    {
    	EnterRule_PLUS();
    	EnterRule("PLUS", 7);
    	TraceIn("PLUS", 7);
    		try
    		{
    		int _type = PLUS;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:54:6: ( '+' )
    		DebugEnterAlt(1);
    		// Calc.g:54:8: '+'
    		{
    		DebugLocation(54, 8);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("PLUS", 7);
    		LeaveRule("PLUS", 7);
    		LeaveRule_PLUS();
        }
    }
    // $ANTLR end "PLUS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MINUS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MINUS() {}

    // $ANTLR start "MINUS"
    [GrammarRule("MINUS")]
    private void mMINUS()
    {
    	EnterRule_MINUS();
    	EnterRule("MINUS", 8);
    	TraceIn("MINUS", 8);
    		try
    		{
    		int _type = MINUS;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:55:7: ( '-' )
    		DebugEnterAlt(1);
    		// Calc.g:55:9: '-'
    		{
    		DebugLocation(55, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MINUS", 8);
    		LeaveRule("MINUS", 8);
    		LeaveRule_MINUS();
        }
    }
    // $ANTLR end "MINUS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MUL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MUL() {}

    // $ANTLR start "MUL"
    [GrammarRule("MUL")]
    private void mMUL()
    {
    	EnterRule_MUL();
    	EnterRule("MUL", 9);
    	TraceIn("MUL", 9);
    		try
    		{
    		int _type = MUL;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:56:5: ( '*' )
    		DebugEnterAlt(1);
    		// Calc.g:56:7: '*'
    		{
    		DebugLocation(56, 7);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MUL", 9);
    		LeaveRule("MUL", 9);
    		LeaveRule_MUL();
        }
    }
    // $ANTLR end "MUL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIV() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIV() {}

    // $ANTLR start "DIV"
    [GrammarRule("DIV")]
    private void mDIV()
    {
    	EnterRule_DIV();
    	EnterRule("DIV", 10);
    	TraceIn("DIV", 10);
    		try
    		{
    		int _type = DIV;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:57:5: ( '/' )
    		DebugEnterAlt(1);
    		// Calc.g:57:7: '/'
    		{
    		DebugLocation(57, 7);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DIV", 10);
    		LeaveRule("DIV", 10);
    		LeaveRule_DIV();
        }
    }
    // $ANTLR end "DIV"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MOD() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MOD() {}

    // $ANTLR start "MOD"
    [GrammarRule("MOD")]
    private void mMOD()
    {
    	EnterRule_MOD();
    	EnterRule("MOD", 11);
    	TraceIn("MOD", 11);
    		try
    		{
    		int _type = MOD;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:58:5: ( '%' )
    		DebugEnterAlt(1);
    		// Calc.g:58:7: '%'
    		{
    		DebugLocation(58, 7);
    		Match('%'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MOD", 11);
    		LeaveRule("MOD", 11);
    		LeaveRule_MOD();
        }
    }
    // $ANTLR end "MOD"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ASSIGN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ASSIGN() {}

    // $ANTLR start "ASSIGN"
    [GrammarRule("ASSIGN")]
    private void mASSIGN()
    {
    	EnterRule_ASSIGN();
    	EnterRule("ASSIGN", 12);
    	TraceIn("ASSIGN", 12);
    		try
    		{
    		int _type = ASSIGN;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:59:8: ( '=' )
    		DebugEnterAlt(1);
    		// Calc.g:59:10: '='
    		{
    		DebugLocation(59, 10);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ASSIGN", 12);
    		LeaveRule("ASSIGN", 12);
    		LeaveRule_ASSIGN();
        }
    }
    // $ANTLR end "ASSIGN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SEMI_COL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SEMI_COL() {}

    // $ANTLR start "SEMI_COL"
    [GrammarRule("SEMI_COL")]
    private void mSEMI_COL()
    {
    	EnterRule_SEMI_COL();
    	EnterRule("SEMI_COL", 13);
    	TraceIn("SEMI_COL", 13);
    		try
    		{
    		int _type = SEMI_COL;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:60:10: ( ';' )
    		DebugEnterAlt(1);
    		// Calc.g:60:12: ';'
    		{
    		DebugLocation(60, 12);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SEMI_COL", 13);
    		LeaveRule("SEMI_COL", 13);
    		LeaveRule_SEMI_COL();
        }
    }
    // $ANTLR end "SEMI_COL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 14);
    	TraceIn("WS", 14);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:62:4: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
    		DebugEnterAlt(1);
    		// Calc.g:62:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
    		{
    		DebugLocation(62, 6);
    		// Calc.g:62:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
    		int cnt5=0;
    		try { DebugEnterSubRule(5);
    		while (true)
    		{
    			int alt5=2;
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_0 = input.LA(1);

    			if (((LA5_0>='\t' && LA5_0<='\n')||(LA5_0>='\f' && LA5_0<='\r')||LA5_0==' '))
    			{
    				alt5 = 1;
    			}


    			} finally { DebugExitDecision(5); }
    			switch (alt5)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// Calc.g:
    				{
    				DebugLocation(62, 6);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt5 >= 1)
    					goto loop5;

    				EarlyExitException eee5 = new EarlyExitException( 5, input );
    				DebugRecognitionException(eee5);
    				throw eee5;
    			}
    			cnt5++;
    		}
    		loop5:
    			;

    		} finally { DebugExitSubRule(5); }

    		DebugLocation(62, 41);
    		_channel = Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 14);
    		LeaveRule("WS", 14);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 15);
    	TraceIn("COMMENT", 15);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:64:9: ( '//' ( . )* ( '\\n' | '\\r' ) )
    		DebugEnterAlt(1);
    		// Calc.g:64:11: '//' ( . )* ( '\\n' | '\\r' )
    		{
    		DebugLocation(64, 11);
    		Match("//"); 

    		DebugLocation(64, 16);
    		// Calc.g:64:16: ( . )*
    		try { DebugEnterSubRule(6);
    		while (true)
    		{
    			int alt6=2;
    			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    			int LA6_0 = input.LA(1);

    			if ((LA6_0=='\n'||LA6_0=='\r'))
    			{
    				alt6 = 2;
    			}
    			else if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
    			{
    				alt6 = 1;
    			}


    			} finally { DebugExitDecision(6); }
    			switch ( alt6 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// Calc.g:64:16: .
    				{
    				DebugLocation(64, 16);
    				MatchAny(); 

    				}
    				break;

    			default:
    				goto loop6;
    			}
    		}

    		loop6:
    			;

    		} finally { DebugExitSubRule(6); }

    		DebugLocation(64, 19);
    		if (input.LA(1)=='\n'||input.LA(1)=='\r')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(64, 31);
    		_channel = Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 15);
    		LeaveRule("COMMENT", 15);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MULTILINE_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MULTILINE_COMMENT() {}

    // $ANTLR start "MULTILINE_COMMENT"
    [GrammarRule("MULTILINE_COMMENT")]
    private void mMULTILINE_COMMENT()
    {
    	EnterRule_MULTILINE_COMMENT();
    	EnterRule("MULTILINE_COMMENT", 16);
    	TraceIn("MULTILINE_COMMENT", 16);
    		try
    		{
    		int _type = MULTILINE_COMMENT;
    		int _channel = DefaultTokenChannel;
    		// Calc.g:65:19: ( '/*' ( . )* '*/' )
    		DebugEnterAlt(1);
    		// Calc.g:65:21: '/*' ( . )* '*/'
    		{
    		DebugLocation(65, 21);
    		Match("/*"); 

    		DebugLocation(65, 26);
    		// Calc.g:65:26: ( . )*
    		try { DebugEnterSubRule(7);
    		while (true)
    		{
    			int alt7=2;
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if ((LA7_0=='*'))
    			{
    				int LA7_1 = input.LA(2);

    				if ((LA7_1=='/'))
    				{
    					alt7 = 2;
    				}
    				else if (((LA7_1>='\u0000' && LA7_1<='.')||(LA7_1>='0' && LA7_1<='\uFFFF')))
    				{
    					alt7 = 1;
    				}


    			}
    			else if (((LA7_0>='\u0000' && LA7_0<=')')||(LA7_0>='+' && LA7_0<='\uFFFF')))
    			{
    				alt7 = 1;
    			}


    			} finally { DebugExitDecision(7); }
    			switch ( alt7 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// Calc.g:65:26: .
    				{
    				DebugLocation(65, 26);
    				MatchAny(); 

    				}
    				break;

    			default:
    				goto loop7;
    			}
    		}

    		loop7:
    			;

    		} finally { DebugExitSubRule(7); }

    		DebugLocation(65, 29);
    		Match("*/"); 

    		DebugLocation(65, 34);
    		_channel = Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MULTILINE_COMMENT", 16);
    		LeaveRule("MULTILINE_COMMENT", 16);
    		LeaveRule_MULTILINE_COMMENT();
        }
    }
    // $ANTLR end "MULTILINE_COMMENT"

    public override void mTokens()
    {
    	// Calc.g:1:8: ( NUMBER | IDENT | OPEN_PAR | CLOSE_PAR | PLUS | MINUS | MUL | DIV | MOD | ASSIGN | SEMI_COL | WS | COMMENT | MULTILINE_COMMENT )
    	int alt8=14;
    	try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    	switch (input.LA(1))
    	{
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt8 = 1;
    		}
    		break;
    	case 'A':
    	case 'B':
    	case 'C':
    	case 'D':
    	case 'E':
    	case 'F':
    	case 'G':
    	case 'H':
    	case 'I':
    	case 'J':
    	case 'K':
    	case 'L':
    	case 'M':
    	case 'N':
    	case 'O':
    	case 'P':
    	case 'Q':
    	case 'R':
    	case 'S':
    	case 'T':
    	case 'U':
    	case 'V':
    	case 'W':
    	case 'X':
    	case 'Y':
    	case 'Z':
    	case 'a':
    	case 'b':
    	case 'c':
    	case 'd':
    	case 'e':
    	case 'f':
    	case 'g':
    	case 'h':
    	case 'i':
    	case 'j':
    	case 'k':
    	case 'l':
    	case 'm':
    	case 'n':
    	case 'o':
    	case 'p':
    	case 'q':
    	case 'r':
    	case 's':
    	case 't':
    	case 'u':
    	case 'v':
    	case 'w':
    	case 'x':
    	case 'y':
    	case 'z':
    		{
    		alt8 = 2;
    		}
    		break;
    	case '(':
    		{
    		alt8 = 3;
    		}
    		break;
    	case ')':
    		{
    		alt8 = 4;
    		}
    		break;
    	case '+':
    		{
    		alt8 = 5;
    		}
    		break;
    	case '-':
    		{
    		alt8 = 6;
    		}
    		break;
    	case '*':
    		{
    		alt8 = 7;
    		}
    		break;
    	case '/':
    		{
    		switch (input.LA(2))
    		{
    		case '/':
    			{
    			alt8 = 13;
    			}
    			break;
    		case '*':
    			{
    			alt8 = 14;
    			}
    			break;
    		default:
    			alt8=8;
    			break;

    		}

    		}
    		break;
    	case '%':
    		{
    		alt8 = 9;
    		}
    		break;
    	case '=':
    		{
    		alt8 = 10;
    		}
    		break;
    	case ';':
    		{
    		alt8 = 11;
    		}
    		break;
    	case '\t':
    	case '\n':
    	case '\f':
    	case '\r':
    	case ' ':
    		{
    		alt8 = 12;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(8); }
    	switch (alt8)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// Calc.g:1:10: NUMBER
    		{
    		DebugLocation(1, 10);
    		mNUMBER(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// Calc.g:1:17: IDENT
    		{
    		DebugLocation(1, 17);
    		mIDENT(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// Calc.g:1:23: OPEN_PAR
    		{
    		DebugLocation(1, 23);
    		mOPEN_PAR(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// Calc.g:1:32: CLOSE_PAR
    		{
    		DebugLocation(1, 32);
    		mCLOSE_PAR(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// Calc.g:1:42: PLUS
    		{
    		DebugLocation(1, 42);
    		mPLUS(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// Calc.g:1:47: MINUS
    		{
    		DebugLocation(1, 47);
    		mMINUS(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// Calc.g:1:53: MUL
    		{
    		DebugLocation(1, 53);
    		mMUL(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// Calc.g:1:57: DIV
    		{
    		DebugLocation(1, 57);
    		mDIV(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// Calc.g:1:61: MOD
    		{
    		DebugLocation(1, 61);
    		mMOD(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// Calc.g:1:65: ASSIGN
    		{
    		DebugLocation(1, 65);
    		mASSIGN(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// Calc.g:1:72: SEMI_COL
    		{
    		DebugLocation(1, 72);
    		mSEMI_COL(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// Calc.g:1:81: WS
    		{
    		DebugLocation(1, 81);
    		mWS(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// Calc.g:1:84: COMMENT
    		{
    		DebugLocation(1, 84);
    		mCOMMENT(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// Calc.g:1:92: MULTILINE_COMMENT
    		{
    		DebugLocation(1, 92);
    		mMULTILINE_COMMENT(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
